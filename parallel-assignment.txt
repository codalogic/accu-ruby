# Simple parallel assignment
    Before swap - x: X, y: Y
    After swap - x: Y, y: X
# Simple array assignment
    x.class in x = [ 1, 2, 3 ] -> Array
# 'Auto' array assignment
    x.class in x = 1, 2, 3 -> Array
# Extracting the first element of an array
    x.class in x, = [ 1, 2, 3 ] -> Fixnum; 1
# Symmetry of extracting the first element of an array
    x.class in x, = 1, 2, 3 -> Fixnum; 1
# This line...
    y.class in x, y = 1, [ 2, 3 ] -> Array; [2, 3]
# ... and this line are equivalent
    y.class in x, y = [ 1, [ 2, 3 ] ] -> Array; [2, 3]
# Brackets can be used to expand nested arrays
    y.class in x, (y, z) = 1, [ 2, 3 ] -> Fixnum; 2
    z.class in x, (y, z) = 1, [ 2, 3 ] -> Fixnum; 3
# If we want the first and second values
    y.class in x, y = [ 1, 2, 3 ] -> Fixnum; 2
# Also, if we want the first and second values
    y.class in x, y = 1, 2, 3 -> Fixnum; 2
# Introducing the 'splat' operator '*'
# How to get the remainder of an array in a variable
    y.class in x, *y = [ 1, 2, 3 ] -> Array; [2, 3]
# Splat on the right side flattens array contents so the following looks like 1, 2, 3
    y.class in x, y, z = 1, *[ 2, 3 ] -> Fixnum; 2
    z.class in x, y, z = 1, *[ 2, 3 ] -> Fixnum; 3
# Ignore all middle values of an array
    z.class in x, *, z = 1, 2, 3, 4 -> Fixnum; 4
# Ignore single value of an array
    z.class in x, (*), z = 1, 2, 3, 4 -> Fixnum; 3
# Unassigned variables become nil
    z.class in x, y, z = 1, 2 -> NilClass; 
